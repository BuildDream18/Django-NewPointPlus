"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

import boto3
import environ
from config.logging import LOGGING

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
env.read_env('.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG', bool)

# Add LoadBalancer DNSName
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'v1_console.apps.V1ConsoleConfig',
    'v1_shop.apps.V1ShopConfig',
    'v1_card.apps.V1CardConfig',
    'v1_terminal.apps.V1TerminalConfig',
    'database.apps.DatabaseConfig',
    'batch.apps.BatchConfig',

    # 3rd party apps
    'drf_spectacular',  # 追加
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'config.middleware.PointPlusMiddleware',  # for the common logs
]

CORS_ORIGIN_WHITELIST = (
    'http://localhost:8080',
    'http://localhost',
)

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# connect mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('MYSQL_DATABASE'),
        'USER': env('MYSQL_USER'),
        'PASSWORD': env('MYSQL_PASSWORD'),
        'HOST': env('MYSQL_HOST'),
        'PORT': '3306',
        'TEST': {
            'NAME': 'test_newpointplus',
            'CHARSET': 'utf8mb4'
        },
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4'
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # 追加
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = env('TZ')

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGGING = LOGGING

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Init Cognito Client
COGNITO_CLIENT = boto3.client(
    'cognito-idp',
    region_name=env('AWS_REGION_NAME'),
    aws_access_key_id=env('AWS_ACCESS_KEY_ID'),
    aws_secret_access_key=env('AWS_SECRET_ACCESS_KEY'),
)

COGNITO_USER_POOL = env.str('COGNITO_USER_POOL', '')
COGNITO_CLIENT_ID = env.str('COGNITO_CLIENT_ID', '')


# Generate First login URL
ARARA_DOMAIN = env.str('ARARA_DOMAIN', 'newpointplus.jp')
INIT_PASSWORD_CHANGE_ROUTE = "initialPasswordChange"

# Error message base
SHOW_ERROR_MESSAGE = env.bool("SHOW_ERROR_MESSAGE", True)

# Testing user for Cognito
TEST_COGNITO_USER_EMAIL = env.str("TEST_COGNITO_USER_EMAIL", "")
TEST_COGNITO_USER_PASSWORD = env.str("TEST_COGNITO_USER_PASSWORD", "")

# TODOKU email service
EMAIL_BACKEND = 'config.email_backend.CustomEmailBackend'
TODOKU_SEND_EMAIL_URL = env.str('TODOKU_SEND_EMAIL_URL', '')
TODOKU_AUTH_TOKEN_URL = env.str('TODOKU_AUTH_TOKEN_URL', '')
TODOKU_CLIENT_ID = env.str('TODOKU_CLIENT_ID', '')
TODOKU_CLIENT_SECRET = env.str('TODOKU_CLIENT_SECRET', '')
TODOKU_ACCESS_TOKEN_REFRESH_TIME = env.int("TODOKU_ACCESS_TOKEN_REFRESH_TIME", 3000)
DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL', '')

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # TODO: Need change to elastic cache if have config
        'LOCATION': 'newpointplus_cache',
    }
}

from typing import Dict

from pycognito import AWSSRP

from django.conf import settings

COGNITO_EXCEPTION = settings.COGNITO_CLIENT.exceptions


def get_aws_srp(username: str, password: str) -> AWSSRP:
    """
    Init AWSSRP instance with provided username, password an cognito settings.
    """
    return AWSSRP(
        username=username,
        password=password,
        pool_id=settings.COGNITO_USER_POOL,
        client_id=settings.COGNITO_CLIENT_ID,
        client=settings.COGNITO_CLIENT_ID
    )


def issue_token(username: str, password: str) -> Dict:
    """
    Calling aws cognito to authenticate a user.
    Returns: dict - response data from cognito.
    """
    aws_srp = get_aws_srp(username, password)
    init_auth_response = settings.COGNITO_CLIENT.initiate_auth(
        AuthFlow="USER_SRP_AUTH",
        AuthParameters=aws_srp.get_auth_params(),
        ClientId=settings.COGNITO_CLIENT_ID,
    )

    if init_auth_response["ChallengeName"] != aws_srp.PASSWORD_VERIFIER_CHALLENGE:
        raise ValueError(f"Unknown challenge {init_auth_response['ChallengeName']}")

    challenge_response = aws_srp.process_challenge(init_auth_response["ChallengeParameters"])
    response = settings.COGNITO_CLIENT.respond_to_auth_challenge(
        ClientId=settings.COGNITO_CLIENT_ID,
        ChallengeName=aws_srp.PASSWORD_VERIFIER_CHALLENGE,
        ChallengeResponses=challenge_response,
    )
    return response


def verify_token(token: str) -> Dict:
    """
    Calling aws cognito to get user info.
    """
    response = settings.COGNITO_CLIENT.get_user(AccessToken=token)
    return response


def update_token(refresh_token: str) -> Dict:
    """
    Authentication flow for refreshing the access token by supplying a valid refresh token
    """
    response = settings.COGNITO_CLIENT.initiate_auth(
        AuthFlow='REFRESH_TOKEN',
        AuthParameters={
            'REFRESH_TOKEN': refresh_token,
        },
        ClientId=settings.COGNITO_CLIENT_ID
    )
    return response


def revoke_token(refresh_token: str) -> Dict:
    """
    Revokes all of the access tokens generated by the specified refresh token.
    """
    response = settings.COGNITO_CLIENT.revoke_token(
        Token=refresh_token,
        ClientId=settings.COGNITO_CLIENT_ID,
    )
    return response


def get_init_pass_url(email: str, session: str) -> str:
    """
    Generate initial password change url.
    """
    return f'{settings.ARARA_DOMAIN}/#/{settings.INIT_PASSWORD_CHANGE_ROUTE}?email={email}?session={session}'


def set_initial_password(email: str, login_password: str, session: str) -> None:
    settings.COGNITO_CLIENT.respond_to_auth_challenge(
        ChallengeResponses={
            'USERNAME': email,
            'NEW_PASSWORD': login_password,
        },
        ClientId=settings.COGNITO_CLIENT_ID,
        ChallengeName='NEW_PASSWORD_REQUIRED',
        Session=session
    )
